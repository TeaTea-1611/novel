# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  termsOfService: String
  privacyPolicy: String
  copyright: String
  me: User
  user(userId: Int!): User
  tags: [Tag!]!
  tagGroups: [TagGroup!]!
  genres: [Genre!]!
  chapterById(chapterId: Int!): Chapter
  chapterByNovelAndOrder(order: Int!, NovelId: Int!): Chapter
  chapters(NovelId: Int!): [Chapter!]!
  novel(novelId: Int!): Novel
  paginatedNovels(page: Int! = 1, take: Int! = 10, keyword: String! = "", gender: Gender, genreId: Int, tagIds: [Int!], sortBy: String, sortOrder: SortOrder = asc): PaginatedNovelsResponse!
  paginatedRankingNovels(page: Int!, take: Int!, type: PaginatedRankingType!, month: Int!, year: Int!): PaginatedNovelsResponse!
  myNovels(page: Int! = 1, take: Int! = 10, keyword: String! = "", gender: Gender, genreId: Int, tagIds: [Int!], sortBy: String, sortOrder: SortOrder = asc): PaginatedNovelsResponse!
}

type User {
  id: Int!
  nickname: String!
  email: String!
  phone: String!
  avatar: String!
  coverImage: String!
  role: UserRole!
  gender: Gender!
  bio: String!
  birthDate: Timestamp!
  socialLinks: [String!]!
  keys: Int!
  tickets: Int!
  candies: Int!
  createdAt: Timestamp!
  emailVerifiedAt: Timestamp
  isTwoFactorAuth: Boolean!
  notificationSettings: NotificationSettings!
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type NotificationSettings {
  userId: Int!
  newChapter: Boolean!
  newInteraction: Boolean!
}

type Tag {
  id: Int!
  tagGroupId: Int!
  name: String!
  group: TagGroup!
}

type TagGroup {
  id: Int!
  name: String!
  color: String!
}

type Genre {
  id: Int!
  name: String!
}

type Chapter {
  id: Int!
  NovelId: Int!
  order: Int!
  title: String!
  unlockPrice: Int!
  readCnt: Int!
  publishAt: Timestamp!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  content: String!
  Novel: Novel
}

type Novel {
  id: Int!
  title: String!
  originalTitle: String
  authorId: Int
  synopsis: String!
  type: NovelType!
  gender: Gender!
  status: NovelStatus!
  coverImage: String!
  genreId: Int!
  wordCount: Int!
  totalChapters: Int!
  publishedAt: Timestamp
  createdAt: Timestamp!
  newChapterAt: Timestamp!
  createdById: Int!
  createdBy: User!
  genre: Genre!
  tags: [Tag!]!
  author: Author
  readMonthly: Int
  nominateMonthly: Int
}

enum NovelType {
  TRANSLATION
  ORIGINAL
}

enum NovelStatus {
  WAITING
  ONGOING
  COMPLETED
  PAUSED
}

type Author {
  id: Int!
  name: String!
  originalName: String!
  country: String!
}

type PaginatedNovelsResponse {
  total: Int!
  novels: [Novel!]!
  prev: Int
  next: Int
  totalPages: Int!
}

enum SortOrder {
  asc
  desc
}

enum PaginatedRankingType {
  read
  flower
  comment
  review
  nominate
}

type Mutation {
  updateTermsOfService(value: String!): Boolean
  updatePrivacyPolicy(value: String!): Boolean
  updateCopyright(value: String!): Boolean
  register(nickname: String!, email: String!, password: String!): MutationResponse!
  login(email: String!, password: String!, code: String): LoginResponse!
  googleLogin(code: String!): LoginResponse!
  logout: Boolean!
  refreshToken: String
  verification(token: String!): MutationResponse!
  passwordReset(email: String!): MutationResponse!
  newPassword(token: String!, newPassword: String!): MutationResponse!
  resendTwoFactorCode(email: String!): MutationResponse!
  changeProfile(nickname: String!, introduce: String!, urls: [String!]!, gender: Int!, dob: Timestamp!): User!
  changeAvatar(avatar: Upload!): User!
  changeAvatarCover(avatarCover: Upload!): User!
  updateTwoFactor(isTwoFactorEnable: Boolean!, code: String): TwoFactorResponse!
  updateNotificationSettings(newChapter: Boolean!, newInteraction: Boolean!): NotificationSettings!
  mutationTag(tagGroupId: Int!, name: String!, tagId: Int): Tag!
  deleteTags(tagIds: [Int!]!): MutationResponse!
  mutationTagGroup(color: String!, name: String!, tagGroupId: Int): TagGroup!
  deleteTagGroups(tagGroupIds: [Int!]!): MutationResponse!
  mutationGenre(name: String!, genreId: Int): Genre!
  deleteGenres(genreIds: [Int!]!): MutationResponse!
  createChapter(NovelId: Int!, order: Int!, title: String!, content: String!, publishAt: Timestamp!, unlockPrice: Int!): ChapterMutationResponse!
  updateChapter(NovelId: Int!, chapterId: Int!, title: String!, content: String!, publishAt: Timestamp!, unlockPrice: Int!): ChapterMutationResponse!
  deleteChapters(chapterIds: [Int!]!, NovelId: Int!): MutationResponse!
  updateChapters(publishAt: Timestamp!, unlockPrice: Int!, chapterIds: [Int!]!, NovelId: Int!): MutationResponse!
  swapChapters(NovelId: Int!, data: [SwapChapterInput!]!): [Chapter!]!
  createNovel(title: String!, synopsis: String!, gender: Gender!, genreId: Int!, tagIds: [Int!]!): NovelResponse!
  updateNovel(novelId: Int!, status: NovelStatus, title: String, synopsis: String, gender: Gender, genreId: Int, tagIds: [Int!]): NovelResponse!
  changeCoverImage(coverImage: Upload!, novelId: Int!): Novel!
  deleteNovel(novelId: Int!): MutationResponse!
}

type MutationResponse implements IMutationResponse {
  success: Boolean!
  message: String!
}

interface IMutationResponse {
  success: Boolean!
  message: String!
}

type LoginResponse implements IMutationResponse {
  success: Boolean!
  message: String!
  user: User
  twoFactor: Boolean
  accessToken: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type TwoFactorResponse implements IMutationResponse {
  success: Boolean!
  message: String!
  twoFactor: Boolean
}

type ChapterMutationResponse implements IMutationResponse {
  success: Boolean!
  message: String!
  chapter: Chapter
}

input SwapChapterInput {
  id: Int!
  newOrder: Int!
}

type NovelResponse implements IMutationResponse {
  success: Boolean!
  message: String!
  novel: Novel
}